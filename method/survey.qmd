---
title: "Survey, stratification"
description: |
  Survey sampling
author: "Chi Zhang"
date: "2024-04-23"
categories: [RWD]
sidebar: false
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    code-tools: false
---


Survey sampling is a bit different from RCT 

## Terms

### Weights

Probability weight: inverse of probability of being included. 

* N/n
* N: number of elements in the population; n: in the sample
* if population has 10 and 3 sampled at random, probability weight is 10/3 = 3.33

Sampling weight: a probability weight that could have other corrections (e.g. unit non-response, calibration, trimming etc)


### Strata

Stratification breaks up the population into groups. Each element in the population must belong to only one strata.

Typically you need two or more PSU in each stratum. 

Purpose of stratification: reduce standard error of the estimates

PSU: Primary sampling unit




### Post-stratification

Stratify data AFTER data is collected, to ensure data is representative of the target population.

[Examples](https://online.stat.psu.edu/stat506/lesson/6/6.3)

* male n=20, y1 = 180
* female n=80, y2 = 120
* overall mean: 132, from $(20*180 + 80*120)/100$

This would be underestimating due to over-representation of female.

Adjustment: 

* in the population, proportion is 0.5 and 0.5
* mean would be $\bar{y_{st}} = 0.5*180 + 0.5*120 = 150$

This is the post stratification estimator. 


### Calibration

Use inverse probability weights to adjust sample.


### Horvitz-Thompson estimator

A method to estimate mean of population in a stratified sample, by applying IPW to account for the difference in sampling distribution between the collected data and target population.


## Inverse probability weighting

Crude example of how it would affect the mean estimate 

```{r}
df <- data.frame(
  v = c(100, 100, 200), # values
  w = c(1, 1, 1), 
  popw = c(0.35, 0.5, 0.15), # assume population proportion
  invw = c(1/0.35, 1/0.5, 1/0.15), 
  w2 = c(0.3, 0.2, 0.5), # observed prop 
  invw2 = c(0.3/0.35, 0.2/0.5, 0.5/0.15) # use obs/pop
)

df

crude_mean <- mean(df$v)
crude_mean
weighted.mean(df$v, w = df$w)
# use inverse probability
weighted.mean(df$v, w = df$invw)
(sum(df$v * 1/df$popw))/(sum(1/df$popw))

# mean 2, need to use weight
weighted.mean(df$v, w = df$w2)

# different obs prop
weighted.mean(df$v, w = df$invw2)
```





