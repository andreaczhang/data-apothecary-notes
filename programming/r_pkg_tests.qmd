---
title: "R package: tests"
description: |
  Notes on tests, with the use of `testthat` package
author: "Chi Zhang"
date: "2023-10-03"
categories: [RSE, Rpkg]
sidebar: false
code-block-bg: false
code-block-border-left: true
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    code-tools: false
---

Useful references: 

* [GSWEP4R: Ensuring Quality](https://openpharma.github.io/workshop-r-swe-sf/slides/04_quality.html#/title-slide) by Matt Secrest
* [R packages (2e)](https://r-pkgs.org) Chapter 13, 14, 15 by Hadley Wickham and Jenny Bryan

Unit test: tests whether your function returns values as expected.

Benefits: 

* Fewer bugs
* Better code structure, thhe functions need to be better designed



Example situations: 

* missing values in the data; 
* zero standard deviation (same values; or one value for the group)
* infinity 



## Use `testthat` in a package

### 1. Initialize

Create `tests/testthat/` directory

```{r}
#| label: init
#| echo: true
#| eval: false

usethis::use_testthat(3)
```

This creates the directory with 

* an empty folder `testthat` where you write your tests
* an R script `testthat.R` where tests are run when `R CMD check` is run. Do not modify this file.


### 2. Create a test

Test files must have names that start with `test`. For example, a function is `R/fn_name.R`, then test is `tests/testthat/test-fn_name.R`.


```{r}
#| label: use_test
#| echo: true
#| eval: false

usethis::use_test('testname')
```


### 3. Run a test

* `testthat::test_file('tests/testthat/test-foofy.R')`
* Run Tests button
* `devtools::test()` for entire test suite. Cmd + Shift + T
* `devtools::check()` 



::: {.callout-tip}

## A workflow worked for me

1. Create a simple function 
2. Create a test file immediately, with clear naming. Inside this test file, can write various tests for the same function.

* have at least a test that expects the **correct** result (`expect_identical()` or else)
* have at least a test that expects **error**, (`expect_error()`). Inside the original function, error should be thrown by `rlang::abort()`.

3. Run test
4. Run test coverage, `covr::package_coverage()` or `covr::code_coverage()`
5. Check

:::







