---
title: "Python programming"
description: |
  Python basics
author: "Chi Zhang"
date: "2024-12-02"
categories: [Python]
sidebar: false
code-block-bg: true
code-block-border-left: true
jupyter: python3
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    code-tools: false
    code-annotations: select
---

> Resources: [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/) by Jake VanderPlas


## Basics

```{python}
print('Winter' + 'Park')
```

Check data types

```{python}
movie = 'Matrix'
print(type(movie))
```

Conditions

```{python}
rating = 74
views = 5400
print(rating>70 and views > 5000)
print(rating>70 or views > 6000)
```


## Data structure

### Lists

Square brackets

```{python}
list1 = ['tea', 'jam', 'scone']
list1

# different types of data can be mixed
list2 = ['tea', 20, True]
list2
```

Index starts from 0

```{python}
list1[0]
```

Lists are **mutable**, you can change the values in the list after it's created.

```{python}
list1[0] = 'milk'
list1
```

Index can also be used on a **string**. However strings are **immutable**: we can not replace a character with another.

```{python}
string = 'milk'
string[3] # prints the 4th character
```


### Slicing

The stopping index is exclusive: `[0:2]` prints out the 1st and 2nd element. 

```{python}
animals =["cat", "dog", "bird", "cow"]
print(animals[0:2]) # excludes 0, takes 1st and 2nd
print(animals[1:3]) # excludes 1, takes 2nd and 3rd
```

The immediate two indices prints out only one value.

```{python}
print(animals[0:1]) # 1st
print(animals[2:3]) # 3rd
```

A easier way to remember this for `[a:b]`, start counting from `[a+1:b]`. Example: `[3:5]` becomes the 4th and 5th; `[2:3]` becomes 3rd and 3rd - just the 3rd.

Ignoring the starting index or stopping index

```{python}
cart = ['lamp', 'candles', 'chair', 'carpet']
print(cart[:2]) # stopping at 2nd
print(cart[1:]) # starting at 2nd
```


Negative indexing

```{python}
print(cart[-1]) # last one
print(cart[-3:]) # last 3
```

```{python}
cart = ['lamp', 'candles', 'chair', 'carpet']
print(cart[1:-1])
```


```{python}
x = 15
x += 5
print(x)

prices = [15, 19, 24, 8, 5]
for i in prices:
  i += 5
  print(i)
```



## Control flow

The indentation can be either 2 or 4. In a loop, it has to be indented. The `:` also is necessary.

* For loops when you know the number of iterations
* While loops when there is a condition to be met

### For loop 

```{python}
for i in range(3):
    print('hello')
```


```{r}
for (i in 1:3){
  print('hello')
}
```

```{python}
# this prints 0, 1, 2, 3, 4
for i in range(5):
    print(i)
```

Combined with lists

```{python}
for i in range(1,3):
  for j in range(2,4):
    print(i, j)
```


```{python}
scores = [45, 67, 89, 34, 56, 77, 49, 91, 52]

for score in scores:
  if score >= 70:
    print(score)
```

Combined with counter

```{python}
results = ['Hit', 'Miss', 'Miss', 'Hit', 'Miss']
count = 0
for i in results:
  if i == 'Hit':
    count +=1
print(count)
```

### While loop

```{python}
n = 4
while n >0:
  print('continue')
  n = n-1
```

In R

```{r}
n <- 4
while(n>0){
  print('continue')
  n <- n-1
}
```


### If else

```{python}
age = 21
if age <= 18:
  print('discount')
#elif age > 18 & age <= 21
#  print('semi-discount')
else:
  print('original price')
```











