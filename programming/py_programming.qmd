---
title: "Python programming"
description: |
  Python basics
author: "Chi Zhang"
date: "2024-12-02"
categories: [Python]
sidebar: false
code-block-bg: true
code-block-border-left: true
jupyter: python3
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    code-tools: false
    code-annotations: select
---

> Resources: [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/) by Jake VanderPlas


## Basics

```{python}
print('Winter' + 'Park')
```

Check data types

```{python}
movie = 'Matrix'
print(type(movie))
```

Conditions

```{python}
rating = 74
views = 5400
print(rating>70 and views > 5000)
print(rating>70 or views > 6000)
```


## Strings


```{python}
channel = 'cnn'
print(channel.upper())  # CNN
print(channel.capitalize()) # Cnn
print(channel.find('c')) # first
print(len(channel)) 
```





### Useful functions

```{python}
movies = ['Avatar', 'Titanic', 'Alien']
movies.append('Avengers')
movies.insert(2, 'Terminator')
print(movies[3])
```


```{python}
ages = [25, 33, 19]
sorted(ages)
sorted(ages, reverse = True)

# sort strings
players = ["Zoe", "Liam", "Emma", "Noah", "Olivia"]
srt_players = sorted(players)
print(srt_players)
```



## Data structure

|    | Mutable   | Ordered | Indexing | Duplicates|
|---------|-----|-----|------|---|
| Lists   | Yes | Yes| Yes| Yes |
| Tuples  |  - | Yes |  Yes| Yes |
| Sets    | Yes  | - |  -   | - |

: Demonstration of pipe table syntax


### Lists

Square brackets

```{python}
list1 = ['tea', 'jam', 'scone']
list1

# different types of data can be mixed
list2 = ['tea', 20, True]
list2
```

Index starts from 0

```{python}
list1[0]
```

Lists are **mutable**, you can change the values in the list after it's created.

```{python}
list1[0] = 'milk'
list1
```

Index can also be used on a **string**. However strings are **immutable**: we can not replace a character with another.

```{python}
string = 'milk'
string[3] # prints the 4th character
```


### Slicing

The stopping index is exclusive: `[0:2]` prints out the 1st and 2nd element. 

```{python}
animals =["cat", "dog", "bird", "cow"]
print(animals[0:2]) # excludes 0, takes 1st and 2nd
print(animals[1:3]) # excludes 1, takes 2nd and 3rd
```

The immediate two indices prints out only one value.

```{python}
print(animals[0:1]) # 1st
print(animals[2:3]) # 3rd
```

A easier way to remember this for `[a:b]`, start counting from `[a+1:b]`. Example: `[3:5]` becomes the 4th and 5th; `[2:3]` becomes 3rd and 3rd - just the 3rd.

Ignoring the starting index or stopping index

```{python}
cart = ['lamp', 'candles', 'chair', 'carpet']
print(cart[:2]) # stopping at 2nd
print(cart[1:]) # starting at 2nd
```


Negative indexing

```{python}
print(cart[-1]) # last one
print(cart[-3:]) # last 3
```

```{python}
cart = ['lamp', 'candles', 'chair', 'carpet']
print(cart[1:-1])
```


```{python}
x = 15
x += 5
print(x)

prices = [15, 19, 24, 8, 5]
for i in prices:
  i += 5
  print(i)
```




### Tuples `()`

Use parentheses. Tuples are **immutable**, they are useful when data shouldn't be accidentally modified. Therefore you can not use `append` functions on tuples.

```{python}
b_date = (21, 'May', 2004)
b_date[1]
```



```{python}
scores = (7, 9, 9, 8, 9)
print('# of 7:', scores.count(7))
print('# of 9:', scores.count(9))
```

Unpacking in tuple. The length needs to be matched; however if you want to deal with unknown number of elements, can use `*`. After unpacking, the elements becomes a `list []`. 

```{python}
grades = (76, 81, 96)
math, history, art = grades
print(math)
math, *others = grades
print(others)
```



### Sets `{}`


With curly brackets. Sets are **unordered** so does not support indexing or slicing. 

```{python}
guests = {"Mery", "Anna", "Jonathan"}
print(guests)
# print(guests[0]) #error
```

Sets can not have duplicates, and duplicates are automatically ignored

```{python}
friends = {'Anna', 'Mery', 'Mery', 'Jonathan'}
print(friends)
```

Sets are mutable, so you can `add` and `remove` items. However, `append` does not work on sets since they are unordered.

```{python}
guests = {"Mery", "Anna", "Jonathan"}
guests.add('Robert')
guests.remove('Mery')
print(guests)
```

To clear the set, 

```{python}
guests.clear()
print(guests)
```


To join sets, use `set1.union(set2)`. This ignores the duplicates. To find the element only in set 1 but not set 2, use `set1.difference(set2)`

```{python}
set1 = {'apple', 'banana'}
set2 = {'banana', 'cherry'}
combined_set = set1.union(set2)
print(combined_set)
unique_1 = set1.difference(set2)
unique_2 = set2.difference(set1)
print([unique_1, unique_2]) # print toether
```


### Dictionary

The values can be of any type, including a list. The keys has to be immutable.

```{python}
product = {
  'name': 'pen',
  'is_red':True,
  'price': 79
}
print(product)
```

When the key is a string, it needs to go with quotation. 

```{python}
dancer = {
  'name' : 'maria',
  'points' : [9, 10, 7]
}
dancer
```

The key has to be unique. If duplicate, the values will be overwritten. 

```{python}
contact = {
  'name' : 'maria',
  'company': 'Google',
  'company': 'facebook'
}
contact
```

To access the values, use `['key']`

```{python}
contact['company']
contact.get('company')
contact.get('baba', 'puff') # if baba does not exist, returns puff 
```


```{python}
contact.keys()
contact.values()
contact.items() # all pairs
```



## Control flow

The indentation can be either 2 or 4. In a loop, it has to be indented. The `:` also is necessary.

* For loops when you know the number of iterations
* While loops when there is a condition to be met

### For loop 

```{python}
for i in range(3):
    print('hello')
```


```{r}
for (i in 1:3){
  print('hello')
}
```

```{python}
# this prints 0, 1, 2, 3, 4
for i in range(5):
    print(i)
```

Combined with lists

```{python}
for i in range(1,3):
  for j in range(2,4):
    print(i, j)
```


```{python}
scores = [45, 67, 89, 34, 56, 77, 49, 91, 52]

for score in scores:
  if score >= 70:
    print(score)
```

Combined with counter

```{python}
results = ['Hit', 'Miss', 'Miss', 'Hit', 'Miss']
count = 0
for i in results:
  if i == 'Hit':
    count +=1
print(count)
```

### While loop

```{python}
n = 4
while n >0:
  print('continue')
  n = n-1
```

In R

```{r}
n <- 4
while(n>0){
  print('continue')
  n <- n-1
}
```


### If else

```{python}
age = 21
if age <= 18:
  print('discount')
#elif age > 18 & age <= 21
#  print('semi-discount')
else:
  print('original price')
```



### Break, continue

`break` needs to be inside the loop. Typically used with **while**

```{python}
songs = ["Hello", "Yesterday", "Happy", "Hallelujah"]

for song in songs:
  print("Searching")
  if song == "Happy":
    print("Playing " + song)
    break
```

`continue` skips when the condition is not met

```{python}
ages = [13,19, 22, 8, 75, 34, 26, 41]
for age in ages:
  if age < 18:
    continue
  print(age)
```


## Function


```{python}
def discounted(price, discount):
  return price * (1-discount/100)
discounted(100, 10)
```







