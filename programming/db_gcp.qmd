---
title: "Google BigQuery and GCP (Google Cloud Platform)"
description: |
  Tutorial on how to set up BigQuery for your project using public datasets
author: "Chi Zhang"
date: "2024-11-29"
categories: [SQL, BigQuery]
sidebar: false
code-block-bg: false
code-block-border-left: true
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    code-tools: false
    highlight-style: gruvbox
---


> Resource: [Google BigQuery: First Steps in R](https://www.youtube.com/watch?v=VzteK2K0gbc&t=4545s)

### Create a GCP project

GCP organises resources by projects. If you do not already have a project, it's time to create one!

Create project with a name and ID 


![](fig/gcp-bigquery/gcp-1.png){width=60%}

![](fig/gcp-bigquery/gcp-2){width=60%}

![](fig/gcp-bigquery/gcp-3){width=60%}

## BigQuery in BigQuery Studio

Now go to BigQuery in the menu. Open **BigQuery Studio**.

![](fig/gcp-bigquery/gcp-4){width=40%}

![](fig/gcp-bigquery/gcp-5){width=70%}


### Find Public datasets


![](fig/gcp-bigquery/gcp-6){width=60%}

Search for BigQuery resources

![](fig/gcp-bigquery/gcp-7){width=30%}


Can use the sources: **public datasets**

![](fig/gcp-bigquery/gcp-9){width=70%}

Now we use the examples of **ADI (Area Deprivation Index)** and **Birth Data Summary** schemas.

![](fig/gcp-bigquery/gcp-10){width=60%}

![](fig/gcp-bigquery/gcp-11){width=60%}

It is useful to **star** the dataset.

![](fig/gcp-bigquery/gcp-13){width=60%}


![](fig/gcp-bigquery/gcp-14){width=60%}
![](fig/gcp-bigquery/gcp-15){width=40%}

It is the entire schema (set of tables) that are added.

![](fig/gcp-bigquery/gcp-16){width=40%}

Can check the **schema, details, preview** to display the table.

![](fig/gcp-bigquery/gcp-17){width=60%}


### Query

Either in a new tab, or a split tab.

![](fig/gcp-bigquery/gcp-19){width=60%}

![](fig/gcp-bigquery/gcp-18){width=60%}

The query is pre-filled with some information. You can click on the schema column names to add it to the query.

Use fully qualified table names (`project.dataset.table`). It is good to limit the size of query results.

![](fig/gcp-bigquery/gcp-21){width=75%}

### Join tables

When working on multiple tables, a good strategy to enable auto-filled fields is to select the tables first. On a second table (here for example it is `county_natality`), click on the **menu** (three dots), `Copy ID` - this will copy the fully qualified (long) table name. 

![](fig/gcp-bigquery/gcp-22){width=50%}

It is good practice to use aliases. 

![](fig/gcp-bigquery/gcp-23){width=75%}

### Save results 

There are a few options to save the results:

* save the **query result** (not table) locally: such as `csv` file
* save **BigQuery table** on GCP

Note that the BigQuery table, once created, can not be downloaded as csv. You need to save the SQL query to reproduce it as query result in order to export it (or connect directly from R).

It is therefore important to **save your SQL query**!

![](fig/gcp-bigquery/gcp-24){width=40%}

Sometimes it is necessary to create a **dataset** in order to save the BQ table.

![](fig/gcp-bigquery/gcp-25){width=60%}
![](fig/gcp-bigquery/gcp-26){width=60%}

You can view the table in your own project list.

![](fig/gcp-bigquery/gcp-27){width=40%}



# BigQuery in R 

This section is an example using `bigrquery` package. Authentication is required.

```{r}
#| eval: false
install.packages('bigrquery')
library(bigrquery)
# authenticate
bq_auth()
```


Run a query from Rstudio"

* set `project_id` and `my_sql_query` objects
* send query to BigQuery `results <- bq_project_query(project_id, my_sql_query)`
* get the table via `df <- bq_table_download(results)`


```{r}
#| eval: false

project_id <- 'bigquery-calicopuff'
my_sql_query <- '
  SELECT 
  date, 
  daily_confirmed_cases, 
  daily_deaths, 
  confirmed_cases 
  FROM `bigquery-public-data.covid19_ecdc.covid_19_geographic_distribution_worldwide` 
  LIMIT 300'
```

Now that the project and query are defined, can run the code to extract the data.

```{r}
#| eval: false

results <- bq_project_query(project_id, my_sql_query)
df <- bq_table_download(results)
```


