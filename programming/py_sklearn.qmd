---
title: "Cheatsheet: Scikit-learn"
description: |
  Refer to the jupyter notebook for rendered code.
author: "Chi Zhang"
date: "2025-02-26"
categories: [Python]
sidebar: false
code-block-bg: true
code-block-border-left: true
jupyter: python3
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    code-tools: false
    code-annotations: select
---

### Load the usual libraries 

```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

### Data exploration 

```python
data.head()
data.describe()
data.shape
data.columns # check colnames
```

Visualize data

```python
sns.histplot(data.variable)
sns.scatterplot(x = data.var1, y = data.var2)
# pair plot for low dimension data
sns.pairplot(data, hue = 'categorical_var')
```

## Feature engineering

```python
# split the response and explanatory
X = data.drop('response', axis = 1)
y = data['response']
```

Train test split

```python
from sklearn.model_selection import train_test_split
Xtrain, Xtest, y_train, y_test = train_test_split(X, y, random_state = 0)
```

Can check the size of the data using `Xtrain.shape`


Cross validation 

```python
from sklearn.model_selection import cross_val_score
cvs = cross_val_score(model, Xtrain, y_train, cv = 10)
```


## Fit ML model and predictions

General workflow

### Decision tree and random forest

They can work on more than two classes, as well as regression.

For decision tree, probability prediction isn't available.

```python
from sklearn.tree import DecisionTreeClassifier
tree = DecisionTreeClassifier().fit(Xtrain, ytrain)

# predict class
tree.predict(Xtest)
```


Random forest

```python
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(max_depth=3, random_state=42)
forest.fit(Xtrain, ytrain)

# predict class
forest.predict(Xtest)

# predict probability
forest.predict_proba(Xtest)
```



### Naive Bayes

```python
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(Xtrain, y_train)

# can also be written as model = GaussianNB().fit(X,y)
y_model = model.predict(Xtest)
```



## Performance

### Class accuracy

```python
from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_model)
# can also try to compare the results manually
np.sum(y_test == y_model) 
```


### Probabilities

Carry out row-wise summation, see if they sum up to 1

```python
rf_prob.sum(axis = 1)
```

### ROC curve




# Visualize results 

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import make_blobs

# from code_py.sklearn_1 import Xtrain

X, y = make_blobs(n_samples=300,
                  centers=4,
                  random_state=0,
                  cluster_std=1)
                  
# plot the two dimensions of X; color with the class in y

sns.scatterplot(x = X[:,0], y = X[:,1], hue=y, palette=sns.color_palette("hls", 4))
plt.show();
```


### Decision tree example

```{python}
# split the data
from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3,random_state=42)

# fit a decision tree
from sklearn.tree import DecisionTreeClassifier
tree = DecisionTreeClassifier().fit(Xtrain, ytrain)

# make prediction
ytest_pred = tree.predict(Xtest)
ytest_pred[0:5]
```

Now we try to visualise the results. First put the predictions along with the original data, and then add a label for whether there is a mismatch.

```{python}
# tt = pd.DataFrame(Xtest, columns=['x1', 'x2'])
# tt['new'] = ytest

mat = np.column_stack((Xtest, ytest, ytest_pred))
test_df = pd.DataFrame(mat, columns=['x1', 'x2', 'y', 'pred'])

# add a new column where y and pred do not match
test_df['mismatch'] = np.where(test_df['y'] != test_df['pred'], 1, 0)
test_df.head()
```

Now visualize

```{python}
# visualize based on mismatch status
sns.relplot(data = test_df,
            x = 'x1',
            y = 'x2',
            col = 'mismatch',
            hue = 'y',
            palette=sns.color_palette("hls", 4))
plt.show();
```


Another way to visualize


```{python}
sns.scatterplot(data = test_df,
                x = 'x1',
                y = 'x2',
                hue = 'y',
                style = 'mismatch',
                palette=sns.color_palette("hls", 4))
plt.show();
```

