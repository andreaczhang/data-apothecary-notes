---
title: "R package Engineering Workflow"
description: |
  Notes on the appropriate workflow in R packages
author: "Chi Zhang"
date: "2023-10-02"
categories: [RSE, Rpkg]
sidebar: false
code-block-bg: false
code-block-border-left: true
format: 
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    code-tools: false
---

Useful references: 

* [GSWEP4R: An R package Engineering Workflow](https://openpharma.github.io/workshop-r-swe-sf/slides/03_workflow.html#/title-slide) by Laura Harris
* [GSWEP4R: Ensuring Quality](https://openpharma.github.io/workshop-r-swe-sf/slides/04_quality.html#/title-slide) by Matt Secrest
* [GSWEP4R: Publication](https://openpharma.github.io/workshop-r-swe-sf/slides/06_publication.html#/title-slide) by Daniel Sjoberg


Steps suggested:

1. Idea
2. Design docs
3. R package programming
4. QC (Quality check)
5. Publication
6. Use in production 

## Step 2: Design docs

**Purpose and scope**: the package `pkg_name` shall ...

**Package requirements**: 


```{r}
#| label: gt-table
#| echo: true

library(gt)
df <- data.frame(obligation = c('Duty', 'Desire', 'Intension'), 
                 keyword = c('shall', 'should', 'will'), 
                 description = c('must have', 'nice to have', 'optional'))

gt(df) |> 
  cols_label(obligation = md('**Obligation**'), 
             keyword = md('**Key word**'), 
             description = md('**Description**'))
```
Use some documentation tools (md, qmd, or diagram [draw.io](https://app.diagrams.net))


## Step 3: packaging 

1. create basic project
2. Copy and paste exisint R scripts, refactor if necessary (i.e. give self-explanatory names)
3. Create R generic functions (`print`, `summary`)
4. Document



::: {.callout-note}

## For me to do

* return result as a list, with class attribute
* return argument

:::






